// Code generated by MockGen. DO NOT EDIT.
// Source: ./../qr/qr.go

// Package qrMocks is a generated GoMock package.
package qrMocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProcessor is a mock of Processor interface
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// ReadQRFromCamera mocks base method
func (m *MockProcessor) ReadQRFromCamera() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadQRFromCamera")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadQRFromCamera indicates an expected call of ReadQRFromCamera
func (mr *MockProcessorMockRecorder) ReadQRFromCamera() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadQRFromCamera", reflect.TypeOf((*MockProcessor)(nil).ReadQRFromCamera))
}

// WriteQR mocks base method
func (m *MockProcessor) WriteQR(path string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteQR", path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteQR indicates an expected call of WriteQR
func (mr *MockProcessorMockRecorder) WriteQR(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteQR", reflect.TypeOf((*MockProcessor)(nil).WriteQR), path, data)
}
